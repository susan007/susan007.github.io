(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{301:function(a,t,e){"use strict";e.r(t);var r=e(0),s=Object(r.a)({},(function(){var a=this.$createElement;this._self._c;return this._m(0)}),[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符==")]),a._v(" "),e("h4",{attrs:{id:"概述：判断两个数是否相等，在比较之前会自动转化类型再做比较。为确定两个运算数是否相等，这两个运算符都会进行类型转换。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述：判断两个数是否相等，在比较之前会自动转化类型再做比较。为确定两个运算数是否相等，这两个运算符都会进行类型转换。"}},[a._v("#")]),a._v(" 概述：判断两个数是否相等，在比较之前会自动转化类型再做比较。为确定两个运算数是否相等，这两个运算符都会进行类型转换。")]),a._v(" "),e("p",[a._v("执行类型转换的规则如下：")]),a._v(" "),e("ul",[e("li",[a._v("如果一个运算数是 Boolean 值，在检查相等性之前，把它转换成数字值。false 转换成 0，true 为 1。")]),a._v(" "),e("li",[a._v("如果一个运算数是字符串，另一个是数字，在检查相等性之前，要尝试把字符串转换成数字。")]),a._v(" "),e("li",[a._v("如果一个运算数是对象，另一个是字符串，在检查相等性之前，要尝试把对象转换成字符串。")]),a._v(" "),e("li",[a._v("如果一个运算数是对象，另一个是数字，在检查相等性之前，要尝试把对象转换成数字。")])]),a._v(" "),e("p",[a._v("在比较时，该运算符还遵守下列规则：")]),a._v(" "),e("ul",[e("li",[a._v("值 null 和 undefined 相等。")]),a._v(" "),e("li",[a._v("在检查相等性时，不能把 null 和 undefined 转换成其他值。")]),a._v(" "),e("li",[a._v("如果某个运算数是 NaN，等号将返回 false，非等号将返回 true。")]),a._v(" "),e("li",[a._v("如果两个运算数都是对象，那么比较的是它们的引用值。如果两个运算数指向同一对象，那么等号返回 true，否则两个运算数不等。")])]),a._v(" "),e("h4",{attrs:{id:"重要提示：即使两个数都是-nan，等号仍然返回-false，因为根据规则，nan-不等于-nan"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重要提示：即使两个数都是-nan，等号仍然返回-false，因为根据规则，nan-不等于-nan"}},[a._v("#")]),a._v(" 重要提示：即使两个数都是 NaN，等号仍然返回 false，因为根据规则，NaN 不等于 NaN")]),a._v(" "),e("h2",{attrs:{id:"运算符-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符-2"}},[a._v("#")]),a._v(" 运算符===")]),a._v(" "),e("h4",{attrs:{id:"概述：全等号由三个等号表示（-），只有在无需类型转换运算数就相等的情况下，才返回-true。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述：全等号由三个等号表示（-），只有在无需类型转换运算数就相等的情况下，才返回-true。"}},[a._v("#")]),a._v(" 概述：全等号由三个等号表示（===），只有在无需类型转换运算数就相等的情况下，才返回 true。")]),a._v(" "),e("h2",{attrs:{id:"运算符-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符-3"}},[a._v("#")]),a._v(" 运算符!==")]),a._v(" "),e("h4",{attrs:{id:"概述：非全等号由感叹号加两个等号（-）表示，只有在无需类型转换运算数不相等的情况下，才返回-true。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述：非全等号由感叹号加两个等号（-）表示，只有在无需类型转换运算数不相等的情况下，才返回-true。"}},[a._v("#")]),a._v(" 概述：非全等号由感叹号加两个等号（!==）表示，只有在无需类型转换运算数不相等的情况下，才返回 true。")])])}],!1,null,null,null);t.default=s.exports}}]);